% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bv_anova_bootstrap_ci}
\alias{bv_anova_bootstrap_ci}
\title{Bootstrap Confidence Intervals for ANOVA Variance Components}
\arguments{
\item{data_orig}{A \code{list} or \code{data.frame} containing the original data.
It must include the columns \code{SubjectID} (as integer), \code{SampleID}
(as integer), \code{ReplicateID} (as integer), and \code{y} (as numeric).}

\item{B}{An \code{integer} specifying the number of bootstrap replicates to perform.
A larger number of replicates (e.g., 1000 or more) is recommended for stable
confidence intervals.}

\item{level}{A \code{double} representing the desired confidence level for the
intervals (e.g., 0.95 for 95\% CIs). Defaults to 0.95.}

\item{output_type_for_point_est}{A \code{character} string specifying the metric
to be estimated in each bootstrap iteration. Must be either \code{"sigma"}
(for standard deviations) or \code{"cv"} (for coefficients of variation).
The resulting CIs will correspond to this metric. Defaults to \code{"sigma"}.}

\item{mult}{A \code{double} used as a scaling factor for the estimates, applied
in each bootstrap iteration. For example, set to 100 to express CVs as
percentages. Defaults to 1.0.}
}
\value{
A \code{list} with the following structure:
\describe{
  {\code{point_estimates}}{A \code{list} containing the point estimates of \code{sigma_A},
    \code{sigma_I}, \code{sigma_G}, and \code{HBHR} calculated from the original, un-resampled data.}
  {\code{conf_intervals}}{A \code{list} containing the lower and upper bounds of the
    percentile bootstrap confidence intervals for each component.}
  {\code{bootstrap_replicates}}{A \code{list} containing the raw numeric vectors of all
    \code{B} estimates for each component. This allows for manual inspection of the
    bootstrap distributions (e.g., plotting histograms).}
  {\code{n_bootstrap_replicates}}{The number of bootstrap replicates (\code{B}) performed.}
  {\code{confidence_level}}{The confidence level used for the intervals.}
}
}
\description{
Calculates percentile bootstrap confidence intervals for variance components
estimated from a three-level nested ANOVA model.
}
\details{
This function implements a non-parametric case-resampling bootstrap
procedure. The key steps are:
\enumerate{
  \item Subjects (the highest level of hierarchy) are resampled with
        replacement from the original dataset.
  \item For each of the \code{B} bootstrap replicates, a new dataset is
        constructed by pooling all observations from the sampled subjects.
  \item The \code{\link{variance_components}} function is called on this
        new dataset to obtain point estimates of the variance components
        (\code{sigma_A}, \code{sigma_I}, \code{sigma_G}) and the HBHR.
  \item After all \code{B} replicates are completed, the confidence
        intervals are calculated from the percentiles of the resulting
        bootstrap distributions.
}
This case-resampling approach correctly accounts for the correlation
structure within subjects. The process can be interrupted by the user.
If any bootstrap iteration fails (e.g., due to a degenerate sample),
it is skipped, and a warning is suppressed to avoid cluttering the console.
}
\examples{
# Create a sample data list for demonstration
sample_data_list <- list(
  SubjectID = as.integer(rep(1:3, each = 4)),
  SampleID = as.integer(rep(1:6, each = 2)),
  ReplicateID = as.integer(rep(1:2, 6)),
  y = c(
    rnorm(2, 100, 10), rnorm(2, 105, 10), # Subject 1
    rnorm(2, 120, 12), rnorm(2, 118, 12), # Subject 2
    rnorm(2, 90, 8), rnorm(2, 92, 8)      # Subject 3
  )
)

# Run bootstrap with a small number of replicates for the example
# In practice, B should be >= 1000
# Note: This example requires the 'variance_components' function to be available.
# The call is commented out as it can be slow and depends on other functions.

# bootstrap_results <- bv_anova_bootstrap_ci(
#   data_orig = sample_data_list,
#   B = 50, # Use a small B for speed in an example
#   level = 0.95,
#   output_type_for_point_est = "sigma"
# )

# print(bootstrap_results$point_estimates)
# print(bootstrap_results$conf_intervals)

}
