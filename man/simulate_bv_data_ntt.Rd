% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{simulate_bv_data_ntt}
\alias{simulate_bv_data_ntt}
\title{Simulate Biological Variation Data From NTT Model}
\usage{
simulate_bv_data_ntt(
  n,
  S = 10L,
  R = 2L,
  cvi = 10,
  cva = 2,
  cvg = 50,
  mu = 100,
  hbhr = 0,
  grand_mean = TRUE,
  subject_dist_type = "normal",
  dfi = 99999999,
  dfa = 99999999
)
}
\arguments{
\item{n}{\code{Integer}. The number of subjects.}

\item{S}{\code{Integer}. The number of samples taken from each subject. Defaults to 10.}

\item{R}{\code{Integer}. The number of replicates measured for each sample. Defaults to 2.}

\item{cvi}{\code{Double}. The coefficient of variation (in percent) for variability within each subject (default is 10).}

\item{cva}{\code{Double}. The coefficient of variation (in percent) for the variability of analytical error (default is 2).}

\item{cvg}{\code{Double}. The coefficient of variation (in percent) for variability between subjects (default is 50).}

\item{mu}{\code{Double}. The overall true mean for the population (default is 100). Must be non-negative.}

\item{hbhr}{\code{Double}. The Harris-Brown heterogeneity ratio (in percent) for the variability of within-subject standard deviations. Default is 0.}

\item{grand_mean}{\code{Boolean}. If \code{TRUE}, SD-components are based on `mu`. Otherwise, on subject/sample-specific means. Default is \code{TRUE}.}

\item{subject_dist_type}{\code{String}. Distribution for subject means: "normal" (results in folded normal via `std::abs()`), "truncnormal" (truncated at 0), or "lognormal". Default is "normal".}

\item{dfi}{\code{Double}. Degrees of freedom for Student's t-distribution of samples within subjects. Use `R_PosInf` (or `Inf`) for normal distribution. Default is `R_PosInf`. Must be > 0.}

\item{dfa}{\code{Double}. Degrees of freedom for Student's t-distribution of analytical replicates. Use `R_PosInf` (or `Inf`) for normal distribution. Default is `R_PosInf`. Must be > 0.}
}
\value{
A `DataFrame` with columns: `SubjectID`, `SampleID`, `ReplicateID`, `y`.
}
\description{
This function simulates biological variation data with options for different distributions
for subject means, within-subject variation, and analytical variation.
}
\details{
Simulate Biological Variation Data with Extended Options


\strong{Subject-Specific Means (`subject_means[i]`):}
Generated based on `mu`, `cvg`, and `subject_dist_type`:
\itemize{
  \item \code{"normal"}: `subject_means[i] = std::abs(R::rnorm(mu, sd_g))`, where `sd_g = (cvg/100) * mu`. This creates a folded normal distribution.
  \item \code{"truncnormal"}: `subject_means[i]` is drawn from `N(mu, sd_g)` truncated at 0. `sd_g = (cvg/100) * mu`. Values are inherently non-negative.
  \item \code{"lognormal"}: `subject_means[i]` is drawn from a log-normal distribution such that its arithmetic mean is `mu` and arithmetic CV is `cvg/100`. Values are inherently non-negative. `mu` must be > 0.
}
All `subject_means[i]` are thus non-negative.

\strong{Samples within Subjects (`sample_val`):}
Drawn from a location-scale Student's t-distribution (or normal if `dfi = Inf`).
Location: `current_subject_mean`.
The "nominal SD" (`sdi_nominal`) is determined by `cvi` and potentially `hbhr`.
  - `mean_for_sdi_calc = grand_mean ? mu : current_subject_mean`
  - `mean_nominal_sdi = (cvi/100) * mean_for_sdi_calc`
  - `sd_for_nominal_sdi_draw = mean_nominal_sdi * (hbhr/100)`
  - `sdi_nominal = std::abs(R::rnorm(mean_nominal_sdi, sd_for_nominal_sdi_draw))`
Scale parameter for t-distribution (`actual_scale_s`):
\itemize{
  \item If `dfi == Inf` (normal): `actual_scale_s = sdi_nominal`. Draw from `N(current_subject_mean, actual_scale_s)`.
  \item If `dfi > 2`: `actual_scale_s = sdi_nominal / sqrt(dfi / (dfi - 2.0))`. Draw `current_subject_mean + actual_scale_s * R::rt(1, dfi)`. `sdi_nominal` is the target SD.
  \item If `0 < dfi <= 2`: `actual_scale_s = sdi_nominal`. Draw `current_subject_mean + actual_scale_s * R::rt(1, dfi)`. `sdi_nominal` is used as the scale parameter directly; the resulting distribution has infinite variance (or undefined for `dfi <= 1`).
}
Then, `sample_val = std::abs(raw_sample_val)`.

\strong{Replicates within Samples (`replicate_val`):}
Drawn similarly using `cva`, `dfa`, and `sample_val` (or `mu` if `grand_mean`).
The "nominal SD" (`sva_nominal`) is `(cva/100) * (grand_mean ? mu : sample_val)`.
Scale parameter for t-distribution (`actual_scale_a`) is determined analogously to `actual_scale_s` using `sva_nominal` and `dfa`.
Then, `replicate_val = std::abs(raw_replicate_val)`.

All final measured values (`y`) are non-negative due to `std::abs()`, resulting in folded-t or folded-normal distributions.
}
\examples{
\dontrun{
# Default (normal distributions for all components)
df_norm <- simulate_bv_data_extended(15, 10, 2, mu = 100)
summary(df_norm$y)

# Student's t for samples (dfi=3) and replicates (dfa=5)
# R_PosInf can be passed as Inf from R
df_t <- simulate_bv_data_extended(15, 10, 2, mu = 100, dfi = 3, dfa = 5)
summary(df_t$y)

# Log-normal subject means
df_lognorm_subj <- simulate_bv_data_extended(15, 10, 2, mu = 100,
                                           subject_dist_type = "lognormal")
summary(df_lognorm_subj$y)

# Truncated normal subject means, t-dist for samples, grand_mean=FALSE
df_mix <- simulate_bv_data_extended(n = 50, S = 5, R = 2,
                                  cvi = 15, cva = 3, cvg = 60, mu = 50,
                                  hbhr = 20, grand_mean = FALSE,
                                  subject_dist_type = "truncnormal", dfi = 4.0, dfa = Inf)
summary(df_mix$y)
}

}
